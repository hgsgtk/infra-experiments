events {}
error_log /var/log/nginx/error.log debug;

http {
  # Enable debug logging for various modules
  error_log /var/log/nginx/error.log debug;

  # Define upstream for Ruby service
  upstream slow_ruby {
    server localhost:8081;
  }

  # Define proxy cache
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;

  # Define log format for access logs
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # HTTP server
  server {
    listen 8084;
    server_name localhost;
    
    # Enable access logging to file
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    location / {
      return 200 "Welcome to nginx server\n";
    }

    location /slow-process {
      # Proxy to the slow Ruby service
      proxy_pass http://slow_ruby;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Enable debug logging for proxy
      proxy_intercept_errors on;
      
      # Set reasonable timeouts
      proxy_connect_timeout 10s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    location /cached-endpoint {
      # Enable proxy cache for this endpoint
      proxy_cache my_cache;
      proxy_cache_key "$scheme$request_method$host$request_uri";
      proxy_cache_valid 200 302 10m;  # Cache successful responses for 10 minutes
      proxy_cache_valid 404 1m;       # Cache 404s for 1 minute
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_lock on;
      proxy_cache_lock_timeout 5s;
      
      # Enable debug logging for cache
      proxy_cache_bypass $http_pragma;
      proxy_cache_revalidate on;
      
      # Add cache headers to response for debugging
      add_header X-Cache-Status $upstream_cache_status;
      add_header X-Cache-Key $request_uri;
      add_header X-Cache-Valid $upstream_cache_status;
            
      # Proxy to the slow Ruby service
      proxy_pass http://slow_ruby;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Set reasonable timeouts
      proxy_connect_timeout 10s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    location /slow-body-response {
      # Simulate a slow endpoint by limiting response rate
      limit_rate 100;
      return 200 "This response will be slow due to rate limiting. Adding more content to make it take longer. This is a slower response for testing purposes. This should take more than 5 seconds to complete. Adding even more content to extend the response time further. The limit_rate directive controls how fast nginx sends the response to the client. With 1 byte per second, this response will be very slow indeed.\n";
    }

    location /test_444 {
      return 444;
    }
  }
}
