events {}

http {
  # Define upstream for Ruby service
  upstream slow_ruby {
    server slow-ruby-service:8081;
  }

  # Define log format for access logs
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # HTTP server
  server {
    listen 8080;
    server_name localhost;
    
    # Enable access logging to stdout
    access_log /dev/stdout main;

    location / {
      return 200 "Welcome to nginx server\n";
    }

    location /slow-process {
      # Proxy to the slow Ruby service
      proxy_pass http://slow_ruby;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Set reasonable timeouts
      proxy_connect_timeout 10s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    location /slow {
      # Simulate a slow endpoint by limiting response rate
      limit_rate 1;  # 1 bytes per second
      return 200 "This response will be slow due to rate limiting. Adding more content to make it take longer. This is a longer message that will take more time to transfer. The rate limiting ensures a slow response for testing purposes. This should take more than 5 seconds to complete. Adding even more content to extend the response time further. The limit_rate directive controls how fast nginx sends the response to the client. With 1 byte per second, this response will be very slow indeed.\n";
    }

    location /test_444 {
      return 444;
    }
  }

  # HTTPS server (for 495, 496, 497)
  server {
    listen 443 ssl;
    server_name localhost;
    
    # Enable access logging to stdout
    access_log /dev/stdout main;

    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    ssl_verify_client   on;
    ssl_client_certificate /etc/nginx/ssl/ca.crt;

    location / {
      return 200 "Welcome to nginx HTTPS server\n";
    }

    location /test_495 {
      # Try connecting with invalid/no certificate to see 495/496 in logs
      return 200 "SSL test\n";
    }
  }
}
